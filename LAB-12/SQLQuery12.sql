--Create following table (Using Design Mode)

--Author 
--Column Name Data Type Constraints
--AuthorID INT Primary Key
--AuthorName VARCHAR(100) NOT NULL
--Country VARCHAR(50) NULL

         CREATE TABLE AUTHOR (
            AUTHORID INT PRIMARY KEY,
            AUTHORNAME VARCHAR(100) NOT NULL,
            COUNTRY VARCHAR(50) NULL );

--AuthorID AuthorName Country
--1 Chetan Bhagat India
--2 Arundhati Roy India
--3 Amish Tripathi India
--4 Ruskin Bond India
--5 Jhumpa Lahiri India
--6 Paulo Coelho Brazil
--7 Sudha Murty India

       INSERT INTO AUTHOR (AUTHORID,AUTHORNAME,COUNTRY) VALUES (1,'CHETAN BHAGAT','INDIA')
       INSERT INTO AUTHOR (AUTHORID,AUTHORNAME,COUNTRY) VALUES (2,'ARUNDHATI ROY','INDIA')
       INSERT INTO AUTHOR (AUTHORID,AUTHORNAME,COUNTRY) VALUES (3,'AMISH TRIPATHI','INDIA')
       INSERT INTO AUTHOR (AUTHORID,AUTHORNAME,COUNTRY) VALUES (4,'RUSKIN BOND','INDIA')
       INSERT INTO AUTHOR (AUTHORID,AUTHORNAME,COUNTRY) VALUES (5,'JHUMPA LAHIRI','INDIA')
       INSERT INTO AUTHOR (AUTHORID,AUTHORNAME,COUNTRY) VALUES (6,'PAULO COELHO','BRAZIL')
       INSERT INTO AUTHOR (AUTHORID,AUTHORNAME,COUNTRY) VALUES (7,'SUDHA MURTY','INDIA')
            SELECT * FROM AUTHOR


--Publisher 
--Column Name Data Type Constraints
--PublisherID INT Primary Key
--PublisherName VARCHAR(100) NOT NULL, UNIQUE
--City VARCHAR(50) NOT NULL

             CREATE TABLE PUBLISHER (
                 PUBLISHERID INT PRIMARY KEY,
                 PUBLISHERNAME VARCHAR(100) NOT NULL UNIQUE,
                 CITY VARCHAR(50) NOT NULL );


--PublisherID PublisherName City
--1 Rupa Publications New Delhi
--2 Penguin India Gurugram
--3 HarperCollins India Noida
--4 Aleph Book Company New Delhi

     INSERT INTO PUBLISHER (PUBLISHERID,PUBLISHERNAME,CITY) VALUES (1,'RUPA PUBLICAION','NEW DELHI')
     INSERT INTO PUBLISHER (PUBLISHERID,PUBLISHERNAME,CITY) VALUES (2,'PENGUIN INDIA','GURUGRAM')
     INSERT INTO PUBLISHER (PUBLISHERID,PUBLISHERNAME,CITY) VALUES (3,'HARPERCOLLINS','INDIA NOIDA')
     INSERT INTO PUBLISHER (PUBLISHERID,PUBLISHERNAME,CITY) VALUES (4,'ALEPH BOOK COMPANY','NEW DELHI')
        SELECT * FROM PUBLISHER


--Book 
--Column Name Data Type Constraints
--BookID INT Primary Key
--Title VARCHAR(200) NOT NULL
--AuthorID INT Foreign Key, AUTHOR(AuthorID), NOT NULL
--PublisherID INT Foreign Key, PUBLISHER(PublisherID), NOT NULL
--Price DECIMAL(8,2) NOT NULL
--PublicationYear INT NOT NULL

           CREATE TABLE BOOK (
              BOOKID INT PRIMARY KEY,
              TITLE VARCHAR(200) NOT NULL,
              AUTHORID INT  NOT NULL,
              PUBLISHERID INT NOT NULL,
              PRICE DECIMAL(8,2) NOT NULL,
              PUBLICATIONYEAR INT NOT NULL,
              FOREIGN KEY (AUTHORID) REFERENCES AUTHOR(AUTHORID),
              FOREIGN KEY (PUBLISHERID) REFERENCES PUBLISHER(PUBLISHERID));

--BookID Title AuthorID PublisherID Price PublicationYear
--101 Five Point Someone 1 1 250.00 2004
--102 The God of Small Things 2 2 350.00 1997
--103 Immortals of Meluha 3 3 300.00 2010
--104 The Blue Umbrella 4 1 180.00 1980
--105 The Lowland 5 2 400.00 2013
--106 Revolution 2020 1 1 275.00 2011
--107 Sita: Warrior of Mithila 3 3 320.00 2017
--108 The Room on the Roof 4 4 200.00 1956

    INSERT INTO BOOK (BOOKID,TITLE,AUTHORID,PUBLISHERID,PRICE,PUBLICATIONYEAR) VALUES (101,'FIVE POINT SOMEONE',1,1,250.00,2004)
    INSERT INTO BOOK (BOOKID,TITLE,AUTHORID,PUBLISHERID,PRICE,PUBLICATIONYEAR) VALUES (102,'THE GOD OF SMALL THINGS',2,2,350.00,1997)
    INSERT INTO BOOK (BOOKID,TITLE,AUTHORID,PUBLISHERID,PRICE,PUBLICATIONYEAR) VALUES (103,'IMMORTALS OF MELUHA',3,3,300.00,2010)
    INSERT INTO BOOK (BOOKID,TITLE,AUTHORID,PUBLISHERID,PRICE,PUBLICATIONYEAR) VALUES (104,'THE BLUE UMBRELLA',4,1,180.00,1980)
    INSERT INTO BOOK (BOOKID,TITLE,AUTHORID,PUBLISHERID,PRICE,PUBLICATIONYEAR) VALUES (105,'THE LOWLAND',5,2,400.00,2013)
    INSERT INTO BOOK (BOOKID,TITLE,AUTHORID,PUBLISHERID,PRICE,PUBLICATIONYEAR) VALUES (106,'REVOLUTION 2020',1,1,275.00,2011)
    INSERT INTO BOOK (BOOKID,TITLE,AUTHORID,PUBLISHERID,PRICE,PUBLICATIONYEAR) VALUES (107,'SITA: WARRIOR OF MITHILA',3,3,320.00,2017)
    INSERT INTO BOOK (BOOKID,TITLE,AUTHORID,PUBLISHERID,PRICE,PUBLICATIONYEAR) VALUES (108,'THE ROOM ON THE ROOF',4,4,200.00,1956)
        SELECT * FROM BOOK

--From the above given table perform the following queries:
--Part – A:
--1.List all books with their authors.
    SELECT TITLE,AUTHORNAME FROM BOOK JOIN AUTHOR ON BOOK.AUTHORID = AUTHOR.AUTHORID
--2.List all books with their publishers.
    SELECT TITLE,PUBLISHERNAME FROM BOOK JOIN PUBLISHER ON BOOK.PUBLISHERID = PUBLISHER.PUBLISHERID
--3.List all books with their authors and publishers.
    SELECT TITLE,AUTHORNAME,PUBLISHERNAME FROM BOOK JOIN AUTHOR ON BOOK.AUTHORID = AUTHOR.AUTHORID JOIN PUBLISHER ON BOOK.PUBLISHERID = PUBLISHER.PUBLISHERID
--4.List all books published after 2010 with their authors and publisher and price.
    SELECT TITLE,AUTHORNAME,PUBLISHERNAME,PRICE FROM BOOK JOIN AUTHOR ON BOOK.AUTHORID = AUTHOR.AUTHORID JOIN PUBLISHER ON  BOOK.PUBLISHERID = PUBLISHER.PUBLISHERID WHERE PUBLICATIONYEAR > 2010   
--5.List all authors and the number of books they have written.
    SELECT AUTHORNAME,COUNT(BOOKID) AS TOTAL_BOOKS FROM AUTHOR LEFT JOIN BOOK ON AUTHOR.AUTHORID = BOOK.AUTHORID GROUP BY AUTHORNAME
--6.List all publishers and the total price of books they have published.
    SELECT PUBLISHERNAME,SUM(PRICE) AS TOTAL_PRICE FROM PUBLISHER LEFT JOIN BOOK ON PUBLISHER.PUBLISHERID = BOOK.PUBLISHERID GROUP BY PUBLISHERNAME
--7.List authors who have not written any books.
    SELECT AUTHORNAME FROM AUTHOR LEFT JOIN BOOK ON AUTHOR.AUTHORID = BOOK.AUTHORID WHERE BOOKID IS NULL
--8.Display total number of Books and Average Price of every Author.
    SELECT AUTHORNAME,COUNT(BOOKID) AS TOTALBOOKS, AVG(PRICE) AS AVG_PRICE FROM AUTHOR LEFT JOIN BOOK ON AUTHOR.AUTHORID = BOOK.AUTHORID GROUP BY AUTHORNAME;
--9.lists each publisher along with the total number of books they have published, sorted from highest to lowest.
    SELECT PUBLISHERNAME, COUNT(BOOKID) AS TOTAL_BOOKS FROM PUBLISHER LEFT JOIN BOOK ON PUBLISHER.PUBLISHERID = BOOK.PUBLISHERID GROUP BY PUBLISHERNAME ORDER BY TOTAL_BOOKS DESC;
--10.Display number of books published each year.
    SELECT PUBLICATIONYEAR, COUNT(BOOKID) AS TOTAL_BOOKS FROM BOOK GROUP BY PUBLICATIONYEAR ORDER BY PUBLICATIONYEAR;

--Part – B:
--1.List the publishers whose total book prices exceed 500, ordered by the total price.
    SELECT PUBLISHERNAME, SUM(PRICE) AS TOTAL_PRICE FROM PUBLISHER JOIN BOOK ON PUBLISHER.PUBLISHERID = BOOK.PUBLISHERID GROUP BY PUBLISHERNAME HAVING SUM(PRICE) > 500 ORDER BY TOTAL_PRICE DESC;
--2.List most expensive book for each author, sort it with the highest price.
    SELECT AUTHORNAME,TITLE,PRICE FROM BOOK B JOIN AUTHOR ON B.AUTHORID = AUTHOR.AUTHORID
    WHERE PRICE = (
    SELECT MAX(PRICE)
    FROM BOOK B2
    WHERE B2.AUTHORID = B.AUTHORID)
    ORDER BY PRICE DESC;

--Part – C: 
--Create table as per following schema with proper validation and try to insert data which violate your validation.
--1.Emp_info(Eid, Ename, Did, Cid, Salary, Experience)
--Dept_info(Did, Dname)
--City_info(Cid, Cname, Did))
--District(Did, Dname, Sid)
--State(Sid, Sname, Cid)
--Country(Cid, Cname)

-- 1. Create tables

CREATE TABLE COUNTRY (
    CID INT PRIMARY KEY,
    CNAME VARCHAR(100) NOT NULL UNIQUE
);

CREATE TABLE STATE (
    SID INT PRIMARY KEY,
    SNAME VARCHAR(100) NOT NULL,
    CID INT NOT NULL,
    FOREIGN KEY (CID) REFERENCES COUNTRY(CID)
);

CREATE TABLE DISTRICT (
    DID INT PRIMARY KEY,
    DNAME VARCHAR(100) NOT NULL,
    SID INT NOT NULL,
    FOREIGN KEY (SID) REFERENCES STATE(SID)
);

CREATE TABLE CITY_INFO (
    CID INT PRIMARY KEY,
    CNAME VARCHAR(100) NOT NULL,
    DID INT NOT NULL,
    FOREIGN KEY (DID) REFERENCES DISTRICT(DID)
);

CREATE TABLE DEPT1_INFO (
    DID INT PRIMARY KEY,
    DNAME VARCHAR(100) NOT NULL UNIQUE
);

CREATE TABLE EMP_INFO (
    EID INT PRIMARY KEY,
    ENAME VARCHAR(100) NOT NULL,
    DID INT NOT NULL,
    CID INT NOT NULL,
    SALARY DECIMAL(10,2) CHECK (SALARY > 0),
    EXPERIENCE INT CHECK (EXPERIENCE >= 0),
    FOREIGN KEY (DID) REFERENCES DEPT1_INFO(DID),
    FOREIGN KEY (CID) REFERENCES CITY_INFO(CID)
);

--2.Insert 5 records in each table.

INSERT INTO COUNTRY VALUES (1, 'INDIA'), (2, 'USA'), (3, 'BRAZIL'), (4, 'UK'), (5, 'CANADA');

INSERT INTO STATE VALUES (1, 'GUJARAT', 1), (2, 'MAHARASHTRA', 1), (3, 'CALIFORNIA', 2), (4, 'ONTARIO', 5), (5, 'LONDON', 4);

INSERT INTO DISTRICT VALUES (1, 'AHMEDABAD', 1), (2, 'PUNE', 2), (3, 'LOS ANGELES COUNTRY', 3), (4, 'TORONTO DISTRICT', 4), (5, 'WESTMINSTER', 5);

INSERT INTO CITY_INFO VALUES (1, 'AHMEDABAD CITY', 1), (2, 'PUNE CITY', 2), (3, 'LOS ANGELES', 3), (4, 'TORONTO', 4), (5, 'LONDON CITY', 5);

INSERT INTO DEPT1_INFO VALUES (1, 'IT'), (2, 'HR'), (3, 'FINANCE'), (4, 'MARKETING'), (5, 'OPERATIONS');

INSERT INTO EMP_INFO VALUES (1, 'RONIT', 1, 1, 50000, 5);
INSERT INTO EMP_INFO VALUES (2, 'AARAV', 2, 2, 40000, 3);
INSERT INTO EMP_INFO VALUES (3, 'MEERA', 3, 3, 60000, 7);
INSERT INTO EMP_INFO VALUES (4, 'SOPHIA', 4, 4, 55000, 6);
INSERT INTO EMP_INFO VALUES (5, 'JOHN', 5, 5, -30000, 2); 

--3.Display employeename, departmentname, Salary, Experience, City, District, State and country of all employees.
--SELECT E.Ename, D.Dname AS DepartmentName, E.Salary, E.Experience,
--       C.Cname AS City, Dist.Dname AS District, S.Sname AS State, Co.Cname AS Country
--FROM Emp_info E
--JOIN Dept_info D ON E.Did = D.Did
--JOIN City_info C ON E.Cid = C.Cid
--JOIN District Dist ON C.Did = Dist.Did
--JOIN State S ON Dist.Sid = S.Sid
--JOIN Country Co ON S.Cid = Co.Cid;

SELECT E.ENAME,D.DNAME AS DEPARTMENTNAME,E.SALARY,E.EXPERIENCE,
C.CNAME AS CITY,DIST.DNAME AS DISTRICT,S.SNAME AS STATE,CO.CNAME AS COUNTRY
FROM EMP_INFO E
JOIN DEPT1_INFO D ON E.DID = D.DID
JOIN CITY_INFO C ON E.CID = C.CID
JOIN DISTRICT DIST ON C.DID = DIST.DID
JOIN STATE S ON DIST.SID = S.SID
JOIN COUNTRY CO ON S.CID = CO.CID
